{"ast":null,"code":"import*as brain from'brain.js';import realEstateData from'./data/realestate.json';// One-hot encode locations\n// One-hot encode locations\nfunction encodeLocation(location){const locationMap={'Downtown':[1,0,0],'Suburban':[0,1,0],'Rural':[0,0,1]};if(!location||location===\"none\"||location===\"\"){return[0,0,0];// Default encoding for empty or invalid location\n}return locationMap[location]||[0,0,0];// Default if unknown\n}// Normalize numerical data\nfunction normalize(value,min,max){return(value-min)/(max-min);}function denormalize(value,min,max){return value*(max-min)+min;}// Find min and max values\nconst areas=realEstateData.map(item=>parseInt(item.Area));const bedrooms=realEstateData.map(item=>parseInt(item.Bedrooms));const bathrooms=realEstateData.map(item=>parseInt(item.Bathrooms));const ages=realEstateData.map(item=>parseInt(item[\"Age of Property\"]));const prices=realEstateData.map(item=>parseInt(item.Price));export const maxArea=Math.max(...areas);export const minArea=Math.min(...areas);export const maxBedrooms=Math.max(...bedrooms);export const minBedrooms=Math.min(...bedrooms);export const maxBathrooms=Math.max(...bathrooms);export const minBathrooms=Math.min(...bathrooms);export const maxAge=Math.max(...ages);export const minAge=Math.min(...ages);export const maxPrice=Math.max(...prices);export const minPrice=Math.min(...prices);// Prepare training data\nconst trainingData=realEstateData.map(item=>({input:{area:normalize(parseInt(item.Area),minArea,maxArea),bedrooms:normalize(parseInt(item.Bedrooms),minBedrooms,maxBedrooms),bathrooms:normalize(parseInt(item.Bathrooms),minBathrooms,maxBathrooms),age:normalize(parseInt(item[\"Age of Property\"]),minAge,maxAge),...Object.fromEntries(encodeLocation(item.Location).map((value,index)=>[`location${index+1}`,value]))},output:{price:normalize(parseInt(item.Price),minPrice,maxPrice)}}));// Create and train the network\nconst net=new brain.NeuralNetwork({hiddenLayers:[4,4]});export function trainNetwork(callback){net.train(trainingData,{iterations:10000,log:true,logPeriod:500,learningRate:0.01,callback:callback,callbackPeriod:500});}export function predictPrice(property){const encodedLocation=encodeLocation(property.Location);const input={area:normalize(parseInt(property.Area),minArea,maxArea),bedrooms:normalize(parseInt(property.Bedrooms),minBedrooms,maxBedrooms),bathrooms:normalize(parseInt(property.Bathrooms),minBathrooms,maxBathrooms),age:normalize(parseInt(property[\"Age of Property\"]),minAge,maxAge),...Object.fromEntries(encodedLocation.map((value,index)=>[`location${index+1}`,value]))};const normalizedPrice=net.run(input).price;return denormalize(normalizedPrice,minPrice,maxPrice);}","map":{"version":3,"names":["brain","realEstateData","encodeLocation","location","locationMap","normalize","value","min","max","denormalize","areas","map","item","parseInt","Area","bedrooms","Bedrooms","bathrooms","Bathrooms","ages","prices","Price","maxArea","Math","minArea","maxBedrooms","minBedrooms","maxBathrooms","minBathrooms","maxAge","minAge","maxPrice","minPrice","trainingData","input","area","age","Object","fromEntries","Location","index","output","price","net","NeuralNetwork","hiddenLayers","trainNetwork","callback","train","iterations","log","logPeriod","learningRate","callbackPeriod","predictPrice","property","encodedLocation","normalizedPrice","run"],"sources":["/Users/jyothiprasannakambam/Desktop/react-brainjs-realestate-predictor/src/neuralNetwork.js"],"sourcesContent":["import * as brain from 'brain.js';\nimport realEstateData from './data/realestate.json';\n\n// One-hot encode locations\n// One-hot encode locations\nfunction encodeLocation(location) {\n    const locationMap = {\n        'Downtown': [1, 0, 0],\n        'Suburban': [0, 1, 0],\n        'Rural': [0, 0, 1]\n    };\n\n    if (!location || location === \"none\" || location === \"\") {\n        return [0, 0, 0]; // Default encoding for empty or invalid location\n    }\n\n    return locationMap[location] || [0, 0, 0]; // Default if unknown\n}\n\n\n// Normalize numerical data\nfunction normalize(value, min, max) {\n    return (value - min) / (max - min);\n}\n\nfunction denormalize(value, min, max) {\n    return value * (max - min) + min;\n}\n\n// Find min and max values\nconst areas = realEstateData.map(item => parseInt(item.Area));\nconst bedrooms = realEstateData.map(item => parseInt(item.Bedrooms));\nconst bathrooms = realEstateData.map(item => parseInt(item.Bathrooms));\nconst ages = realEstateData.map(item => parseInt(item[\"Age of Property\"]));\nconst prices = realEstateData.map(item => parseInt(item.Price));\n\nexport const maxArea = Math.max(...areas);\nexport const minArea = Math.min(...areas);\nexport const maxBedrooms = Math.max(...bedrooms);\nexport const minBedrooms = Math.min(...bedrooms);\nexport const maxBathrooms = Math.max(...bathrooms);\nexport const minBathrooms = Math.min(...bathrooms);\nexport const maxAge = Math.max(...ages);\nexport const minAge = Math.min(...ages);\nexport const maxPrice = Math.max(...prices);\nexport const minPrice = Math.min(...prices);\n\n// Prepare training data\nconst trainingData = realEstateData.map(item => ({\n    input: {\n        area: normalize(parseInt(item.Area), minArea, maxArea),\n        bedrooms: normalize(parseInt(item.Bedrooms), minBedrooms, maxBedrooms),\n        bathrooms: normalize(parseInt(item.Bathrooms), minBathrooms, maxBathrooms),\n        age: normalize(parseInt(item[\"Age of Property\"]), minAge, maxAge),\n        ...Object.fromEntries(encodeLocation(item.Location).map((value, index) => [`location${index + 1}`, value]))\n    },\n    output: {\n        price: normalize(parseInt(item.Price), minPrice, maxPrice)\n    }\n}));\n\n// Create and train the network\nconst net = new brain.NeuralNetwork({ hiddenLayers: [4, 4] });\n\nexport function trainNetwork(callback) {\n    net.train(trainingData, {\n        iterations: 10000,\n        log: true,\n        logPeriod: 500,\n        learningRate: 0.01,\n        callback: callback,\n        callbackPeriod: 500\n    });\n}\n\nexport function predictPrice(property) {\n    const encodedLocation = encodeLocation(property.Location);\n    const input = {\n        area: normalize(parseInt(property.Area), minArea, maxArea),\n        bedrooms: normalize(parseInt(property.Bedrooms), minBedrooms, maxBedrooms),\n        bathrooms: normalize(parseInt(property.Bathrooms), minBathrooms, maxBathrooms),\n        age: normalize(parseInt(property[\"Age of Property\"]), minAge, maxAge),\n        ...Object.fromEntries(encodedLocation.map((value, index) => [`location${index + 1}`, value]))\n    };\n\n    const normalizedPrice = net.run(input).price;\n    return denormalize(normalizedPrice, minPrice, maxPrice);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}