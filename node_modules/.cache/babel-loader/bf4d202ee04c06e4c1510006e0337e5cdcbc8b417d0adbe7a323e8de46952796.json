{"ast":null,"code":"import * as brain from 'brain.js';\nimport realEstateData from './data/realestate.json';\n\n// One-hot encode locations\nfunction encodeLocation(location) {\n  const locationMap = {\n    'Downtown': [1, 0, 0],\n    'Suburban': [0, 1, 0],\n    'Rural': [0, 0, 1]\n  };\n  return locationMap[location] || [0, 0, 0]; // Default if unknown\n}\n\n// Normalize numerical data\nfunction normalize(value, min, max) {\n  return (value - min) / (max - min);\n}\nfunction denormalize(value, min, max) {\n  return value * (max - min) + min;\n}\n\n// Find min and max values\nconst areas = realEstateData.map(item => parseInt(item.Area));\nconst bedrooms = realEstateData.map(item => parseInt(item.Bedrooms));\nconst bathrooms = realEstateData.map(item => parseInt(item.Bathrooms));\nconst ages = realEstateData.map(item => parseInt(item[\"Age of Property\"]));\nconst prices = realEstateData.map(item => parseInt(item.Price));\nconst maxArea = Math.max(...areas);\nconst minArea = Math.min(...areas);\nconst maxBedrooms = Math.max(...bedrooms);\nconst minBedrooms = Math.min(...bedrooms);\nconst maxBathrooms = Math.max(...bathrooms);\nconst minBathrooms = Math.min(...bathrooms);\nconst maxAge = Math.max(...ages);\nconst minAge = Math.min(...ages);\nconst maxPrice = Math.max(...prices);\nconst minPrice = Math.min(...prices);\n\n// Prepare training data\nconst trainingData = realEstateData.map(item => ({\n  input: {\n    area: normalize(parseInt(item.Area), minArea, maxArea),\n    bedrooms: normalize(parseInt(item.Bedrooms), minBedrooms, maxBedrooms),\n    bathrooms: normalize(parseInt(item.Bathrooms), minBathrooms, maxBathrooms),\n    age: normalize(parseInt(item[\"Age of Property\"]), minAge, maxAge),\n    ...Object.fromEntries(encodeLocation(item.Location).map((value, index) => [`location${index + 1}`, value]))\n  },\n  output: {\n    price: normalize(parseInt(item.Price), minPrice, maxPrice)\n  }\n}));\n\n// Create and train the network\nconst net = new brain.NeuralNetwork({\n  hiddenLayers: [4, 4]\n});\nexport function trainNetwork(callback) {\n  net.train(trainingData, {\n    iterations: 10000,\n    log: true,\n    logPeriod: 500,\n    learningRate: 0.01,\n    callback: callback,\n    callbackPeriod: 500\n  });\n}\nexport function predictPrice(property) {\n  const encodedLocation = encodeLocation(property.Location);\n  const input = {\n    area: normalize(parseInt(property.Area), minArea, maxArea),\n    bedrooms: normalize(parseInt(property.Bedrooms), minBedrooms, maxBedrooms),\n    bathrooms: normalize(parseInt(property.Bathrooms), minBathrooms, maxBathrooms),\n    age: normalize(parseInt(property[\"Age of Property\"]), minAge, maxAge),\n    ...Object.fromEntries(encodedLocation.map((value, index) => [`location${index + 1}`, value]))\n  };\n  const normalizedPrice = net.run(input).price;\n  return denormalize(normalizedPrice, minPrice, maxPrice);\n}","map":{"version":3,"names":["brain","realEstateData","encodeLocation","location","locationMap","normalize","value","min","max","denormalize","areas","map","item","parseInt","Area","bedrooms","Bedrooms","bathrooms","Bathrooms","ages","prices","Price","maxArea","Math","minArea","maxBedrooms","minBedrooms","maxBathrooms","minBathrooms","maxAge","minAge","maxPrice","minPrice","trainingData","input","area","age","Object","fromEntries","Location","index","output","price","net","NeuralNetwork","hiddenLayers","trainNetwork","callback","train","iterations","log","logPeriod","learningRate","callbackPeriod","predictPrice","property","encodedLocation","normalizedPrice","run"],"sources":["/Users/jyothiprasannakambam/Desktop/Apps/my-real-estate-app copy/src/neuralNetwork.js"],"sourcesContent":["import * as brain from 'brain.js';\nimport realEstateData from './data/realestate.json';\n\n// One-hot encode locations\nfunction encodeLocation(location) {\n    const locationMap = {\n        'Downtown': [1, 0, 0],\n        'Suburban': [0, 1, 0],\n        'Rural': [0, 0, 1]\n    };\n    return locationMap[location] || [0, 0, 0]; // Default if unknown\n}\n\n// Normalize numerical data\nfunction normalize(value, min, max) {\n    return (value - min) / (max - min);\n}\n\nfunction denormalize(value, min, max) {\n    return value * (max - min) + min;\n}\n\n// Find min and max values\nconst areas = realEstateData.map(item => parseInt(item.Area));\nconst bedrooms = realEstateData.map(item => parseInt(item.Bedrooms));\nconst bathrooms = realEstateData.map(item => parseInt(item.Bathrooms));\nconst ages = realEstateData.map(item => parseInt(item[\"Age of Property\"]));\nconst prices = realEstateData.map(item => parseInt(item.Price));\n\nconst maxArea = Math.max(...areas);\nconst minArea = Math.min(...areas);\nconst maxBedrooms = Math.max(...bedrooms);\nconst minBedrooms = Math.min(...bedrooms);\nconst maxBathrooms = Math.max(...bathrooms);\nconst minBathrooms = Math.min(...bathrooms);\nconst maxAge = Math.max(...ages);\nconst minAge = Math.min(...ages);\nconst maxPrice = Math.max(...prices);\nconst minPrice = Math.min(...prices);\n\n// Prepare training data\nconst trainingData = realEstateData.map(item => ({\n    input: {\n        area: normalize(parseInt(item.Area), minArea, maxArea),\n        bedrooms: normalize(parseInt(item.Bedrooms), minBedrooms, maxBedrooms),\n        bathrooms: normalize(parseInt(item.Bathrooms), minBathrooms, maxBathrooms),\n        age: normalize(parseInt(item[\"Age of Property\"]), minAge, maxAge),\n        ...Object.fromEntries(encodeLocation(item.Location).map((value, index) => [`location${index + 1}`, value]))\n    },\n    output: {\n        price: normalize(parseInt(item.Price), minPrice, maxPrice)\n    }\n}));\n\n// Create and train the network\nconst net = new brain.NeuralNetwork({ hiddenLayers: [4, 4] });\n\nexport function trainNetwork(callback) {\n    net.train(trainingData, {\n        iterations: 10000,\n        log: true,\n        logPeriod: 500,\n        learningRate: 0.01,\n        callback: callback,\n        callbackPeriod: 500\n    });\n}\n\nexport function predictPrice(property) {\n    const encodedLocation = encodeLocation(property.Location);\n    const input = {\n        area: normalize(parseInt(property.Area), minArea, maxArea),\n        bedrooms: normalize(parseInt(property.Bedrooms), minBedrooms, maxBedrooms),\n        bathrooms: normalize(parseInt(property.Bathrooms), minBathrooms, maxBathrooms),\n        age: normalize(parseInt(property[\"Age of Property\"]), minAge, maxAge),\n        ...Object.fromEntries(encodedLocation.map((value, index) => [`location${index + 1}`, value]))\n    };\n\n    const normalizedPrice = net.run(input).price;\n    return denormalize(normalizedPrice, minPrice, maxPrice);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}